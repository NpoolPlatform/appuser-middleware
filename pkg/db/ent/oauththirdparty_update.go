// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/appuser-middleware/pkg/db/ent/oauththirdparty"
	"github.com/NpoolPlatform/appuser-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// OAuthThirdPartyUpdate is the builder for updating OAuthThirdParty entities.
type OAuthThirdPartyUpdate struct {
	config
	hooks     []Hook
	mutation  *OAuthThirdPartyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OAuthThirdPartyUpdate builder.
func (otpu *OAuthThirdPartyUpdate) Where(ps ...predicate.OAuthThirdParty) *OAuthThirdPartyUpdate {
	otpu.mutation.Where(ps...)
	return otpu
}

// SetCreatedAt sets the "created_at" field.
func (otpu *OAuthThirdPartyUpdate) SetCreatedAt(u uint32) *OAuthThirdPartyUpdate {
	otpu.mutation.ResetCreatedAt()
	otpu.mutation.SetCreatedAt(u)
	return otpu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (otpu *OAuthThirdPartyUpdate) SetNillableCreatedAt(u *uint32) *OAuthThirdPartyUpdate {
	if u != nil {
		otpu.SetCreatedAt(*u)
	}
	return otpu
}

// AddCreatedAt adds u to the "created_at" field.
func (otpu *OAuthThirdPartyUpdate) AddCreatedAt(u int32) *OAuthThirdPartyUpdate {
	otpu.mutation.AddCreatedAt(u)
	return otpu
}

// SetUpdatedAt sets the "updated_at" field.
func (otpu *OAuthThirdPartyUpdate) SetUpdatedAt(u uint32) *OAuthThirdPartyUpdate {
	otpu.mutation.ResetUpdatedAt()
	otpu.mutation.SetUpdatedAt(u)
	return otpu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (otpu *OAuthThirdPartyUpdate) AddUpdatedAt(u int32) *OAuthThirdPartyUpdate {
	otpu.mutation.AddUpdatedAt(u)
	return otpu
}

// SetDeletedAt sets the "deleted_at" field.
func (otpu *OAuthThirdPartyUpdate) SetDeletedAt(u uint32) *OAuthThirdPartyUpdate {
	otpu.mutation.ResetDeletedAt()
	otpu.mutation.SetDeletedAt(u)
	return otpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (otpu *OAuthThirdPartyUpdate) SetNillableDeletedAt(u *uint32) *OAuthThirdPartyUpdate {
	if u != nil {
		otpu.SetDeletedAt(*u)
	}
	return otpu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (otpu *OAuthThirdPartyUpdate) AddDeletedAt(u int32) *OAuthThirdPartyUpdate {
	otpu.mutation.AddDeletedAt(u)
	return otpu
}

// SetEntID sets the "ent_id" field.
func (otpu *OAuthThirdPartyUpdate) SetEntID(u uuid.UUID) *OAuthThirdPartyUpdate {
	otpu.mutation.SetEntID(u)
	return otpu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (otpu *OAuthThirdPartyUpdate) SetNillableEntID(u *uuid.UUID) *OAuthThirdPartyUpdate {
	if u != nil {
		otpu.SetEntID(*u)
	}
	return otpu
}

// SetClientName sets the "client_name" field.
func (otpu *OAuthThirdPartyUpdate) SetClientName(s string) *OAuthThirdPartyUpdate {
	otpu.mutation.SetClientName(s)
	return otpu
}

// SetNillableClientName sets the "client_name" field if the given value is not nil.
func (otpu *OAuthThirdPartyUpdate) SetNillableClientName(s *string) *OAuthThirdPartyUpdate {
	if s != nil {
		otpu.SetClientName(*s)
	}
	return otpu
}

// ClearClientName clears the value of the "client_name" field.
func (otpu *OAuthThirdPartyUpdate) ClearClientName() *OAuthThirdPartyUpdate {
	otpu.mutation.ClearClientName()
	return otpu
}

// SetClientTag sets the "client_tag" field.
func (otpu *OAuthThirdPartyUpdate) SetClientTag(s string) *OAuthThirdPartyUpdate {
	otpu.mutation.SetClientTag(s)
	return otpu
}

// SetNillableClientTag sets the "client_tag" field if the given value is not nil.
func (otpu *OAuthThirdPartyUpdate) SetNillableClientTag(s *string) *OAuthThirdPartyUpdate {
	if s != nil {
		otpu.SetClientTag(*s)
	}
	return otpu
}

// ClearClientTag clears the value of the "client_tag" field.
func (otpu *OAuthThirdPartyUpdate) ClearClientTag() *OAuthThirdPartyUpdate {
	otpu.mutation.ClearClientTag()
	return otpu
}

// SetClientLogoURL sets the "client_logo_url" field.
func (otpu *OAuthThirdPartyUpdate) SetClientLogoURL(s string) *OAuthThirdPartyUpdate {
	otpu.mutation.SetClientLogoURL(s)
	return otpu
}

// SetNillableClientLogoURL sets the "client_logo_url" field if the given value is not nil.
func (otpu *OAuthThirdPartyUpdate) SetNillableClientLogoURL(s *string) *OAuthThirdPartyUpdate {
	if s != nil {
		otpu.SetClientLogoURL(*s)
	}
	return otpu
}

// ClearClientLogoURL clears the value of the "client_logo_url" field.
func (otpu *OAuthThirdPartyUpdate) ClearClientLogoURL() *OAuthThirdPartyUpdate {
	otpu.mutation.ClearClientLogoURL()
	return otpu
}

// SetClientOauthURL sets the "client_oauth_url" field.
func (otpu *OAuthThirdPartyUpdate) SetClientOauthURL(s string) *OAuthThirdPartyUpdate {
	otpu.mutation.SetClientOauthURL(s)
	return otpu
}

// SetNillableClientOauthURL sets the "client_oauth_url" field if the given value is not nil.
func (otpu *OAuthThirdPartyUpdate) SetNillableClientOauthURL(s *string) *OAuthThirdPartyUpdate {
	if s != nil {
		otpu.SetClientOauthURL(*s)
	}
	return otpu
}

// ClearClientOauthURL clears the value of the "client_oauth_url" field.
func (otpu *OAuthThirdPartyUpdate) ClearClientOauthURL() *OAuthThirdPartyUpdate {
	otpu.mutation.ClearClientOauthURL()
	return otpu
}

// SetResponseType sets the "response_type" field.
func (otpu *OAuthThirdPartyUpdate) SetResponseType(s string) *OAuthThirdPartyUpdate {
	otpu.mutation.SetResponseType(s)
	return otpu
}

// SetNillableResponseType sets the "response_type" field if the given value is not nil.
func (otpu *OAuthThirdPartyUpdate) SetNillableResponseType(s *string) *OAuthThirdPartyUpdate {
	if s != nil {
		otpu.SetResponseType(*s)
	}
	return otpu
}

// ClearResponseType clears the value of the "response_type" field.
func (otpu *OAuthThirdPartyUpdate) ClearResponseType() *OAuthThirdPartyUpdate {
	otpu.mutation.ClearResponseType()
	return otpu
}

// SetScope sets the "scope" field.
func (otpu *OAuthThirdPartyUpdate) SetScope(s string) *OAuthThirdPartyUpdate {
	otpu.mutation.SetScope(s)
	return otpu
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (otpu *OAuthThirdPartyUpdate) SetNillableScope(s *string) *OAuthThirdPartyUpdate {
	if s != nil {
		otpu.SetScope(*s)
	}
	return otpu
}

// ClearScope clears the value of the "scope" field.
func (otpu *OAuthThirdPartyUpdate) ClearScope() *OAuthThirdPartyUpdate {
	otpu.mutation.ClearScope()
	return otpu
}

// Mutation returns the OAuthThirdPartyMutation object of the builder.
func (otpu *OAuthThirdPartyUpdate) Mutation() *OAuthThirdPartyMutation {
	return otpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (otpu *OAuthThirdPartyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := otpu.defaults(); err != nil {
		return 0, err
	}
	if len(otpu.hooks) == 0 {
		affected, err = otpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OAuthThirdPartyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			otpu.mutation = mutation
			affected, err = otpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(otpu.hooks) - 1; i >= 0; i-- {
			if otpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = otpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, otpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (otpu *OAuthThirdPartyUpdate) SaveX(ctx context.Context) int {
	affected, err := otpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (otpu *OAuthThirdPartyUpdate) Exec(ctx context.Context) error {
	_, err := otpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otpu *OAuthThirdPartyUpdate) ExecX(ctx context.Context) {
	if err := otpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (otpu *OAuthThirdPartyUpdate) defaults() error {
	if _, ok := otpu.mutation.UpdatedAt(); !ok {
		if oauththirdparty.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized oauththirdparty.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := oauththirdparty.UpdateDefaultUpdatedAt()
		otpu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (otpu *OAuthThirdPartyUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OAuthThirdPartyUpdate {
	otpu.modifiers = append(otpu.modifiers, modifiers...)
	return otpu
}

func (otpu *OAuthThirdPartyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   oauththirdparty.Table,
			Columns: oauththirdparty.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: oauththirdparty.FieldID,
			},
		},
	}
	if ps := otpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := otpu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: oauththirdparty.FieldCreatedAt,
		})
	}
	if value, ok := otpu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: oauththirdparty.FieldCreatedAt,
		})
	}
	if value, ok := otpu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: oauththirdparty.FieldUpdatedAt,
		})
	}
	if value, ok := otpu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: oauththirdparty.FieldUpdatedAt,
		})
	}
	if value, ok := otpu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: oauththirdparty.FieldDeletedAt,
		})
	}
	if value, ok := otpu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: oauththirdparty.FieldDeletedAt,
		})
	}
	if value, ok := otpu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: oauththirdparty.FieldEntID,
		})
	}
	if value, ok := otpu.mutation.ClientName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauththirdparty.FieldClientName,
		})
	}
	if otpu.mutation.ClientNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: oauththirdparty.FieldClientName,
		})
	}
	if value, ok := otpu.mutation.ClientTag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauththirdparty.FieldClientTag,
		})
	}
	if otpu.mutation.ClientTagCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: oauththirdparty.FieldClientTag,
		})
	}
	if value, ok := otpu.mutation.ClientLogoURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauththirdparty.FieldClientLogoURL,
		})
	}
	if otpu.mutation.ClientLogoURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: oauththirdparty.FieldClientLogoURL,
		})
	}
	if value, ok := otpu.mutation.ClientOauthURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauththirdparty.FieldClientOauthURL,
		})
	}
	if otpu.mutation.ClientOauthURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: oauththirdparty.FieldClientOauthURL,
		})
	}
	if value, ok := otpu.mutation.ResponseType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauththirdparty.FieldResponseType,
		})
	}
	if otpu.mutation.ResponseTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: oauththirdparty.FieldResponseType,
		})
	}
	if value, ok := otpu.mutation.Scope(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauththirdparty.FieldScope,
		})
	}
	if otpu.mutation.ScopeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: oauththirdparty.FieldScope,
		})
	}
	_spec.Modifiers = otpu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, otpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauththirdparty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// OAuthThirdPartyUpdateOne is the builder for updating a single OAuthThirdParty entity.
type OAuthThirdPartyUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OAuthThirdPartyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (otpuo *OAuthThirdPartyUpdateOne) SetCreatedAt(u uint32) *OAuthThirdPartyUpdateOne {
	otpuo.mutation.ResetCreatedAt()
	otpuo.mutation.SetCreatedAt(u)
	return otpuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (otpuo *OAuthThirdPartyUpdateOne) SetNillableCreatedAt(u *uint32) *OAuthThirdPartyUpdateOne {
	if u != nil {
		otpuo.SetCreatedAt(*u)
	}
	return otpuo
}

// AddCreatedAt adds u to the "created_at" field.
func (otpuo *OAuthThirdPartyUpdateOne) AddCreatedAt(u int32) *OAuthThirdPartyUpdateOne {
	otpuo.mutation.AddCreatedAt(u)
	return otpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (otpuo *OAuthThirdPartyUpdateOne) SetUpdatedAt(u uint32) *OAuthThirdPartyUpdateOne {
	otpuo.mutation.ResetUpdatedAt()
	otpuo.mutation.SetUpdatedAt(u)
	return otpuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (otpuo *OAuthThirdPartyUpdateOne) AddUpdatedAt(u int32) *OAuthThirdPartyUpdateOne {
	otpuo.mutation.AddUpdatedAt(u)
	return otpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (otpuo *OAuthThirdPartyUpdateOne) SetDeletedAt(u uint32) *OAuthThirdPartyUpdateOne {
	otpuo.mutation.ResetDeletedAt()
	otpuo.mutation.SetDeletedAt(u)
	return otpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (otpuo *OAuthThirdPartyUpdateOne) SetNillableDeletedAt(u *uint32) *OAuthThirdPartyUpdateOne {
	if u != nil {
		otpuo.SetDeletedAt(*u)
	}
	return otpuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (otpuo *OAuthThirdPartyUpdateOne) AddDeletedAt(u int32) *OAuthThirdPartyUpdateOne {
	otpuo.mutation.AddDeletedAt(u)
	return otpuo
}

// SetEntID sets the "ent_id" field.
func (otpuo *OAuthThirdPartyUpdateOne) SetEntID(u uuid.UUID) *OAuthThirdPartyUpdateOne {
	otpuo.mutation.SetEntID(u)
	return otpuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (otpuo *OAuthThirdPartyUpdateOne) SetNillableEntID(u *uuid.UUID) *OAuthThirdPartyUpdateOne {
	if u != nil {
		otpuo.SetEntID(*u)
	}
	return otpuo
}

// SetClientName sets the "client_name" field.
func (otpuo *OAuthThirdPartyUpdateOne) SetClientName(s string) *OAuthThirdPartyUpdateOne {
	otpuo.mutation.SetClientName(s)
	return otpuo
}

// SetNillableClientName sets the "client_name" field if the given value is not nil.
func (otpuo *OAuthThirdPartyUpdateOne) SetNillableClientName(s *string) *OAuthThirdPartyUpdateOne {
	if s != nil {
		otpuo.SetClientName(*s)
	}
	return otpuo
}

// ClearClientName clears the value of the "client_name" field.
func (otpuo *OAuthThirdPartyUpdateOne) ClearClientName() *OAuthThirdPartyUpdateOne {
	otpuo.mutation.ClearClientName()
	return otpuo
}

// SetClientTag sets the "client_tag" field.
func (otpuo *OAuthThirdPartyUpdateOne) SetClientTag(s string) *OAuthThirdPartyUpdateOne {
	otpuo.mutation.SetClientTag(s)
	return otpuo
}

// SetNillableClientTag sets the "client_tag" field if the given value is not nil.
func (otpuo *OAuthThirdPartyUpdateOne) SetNillableClientTag(s *string) *OAuthThirdPartyUpdateOne {
	if s != nil {
		otpuo.SetClientTag(*s)
	}
	return otpuo
}

// ClearClientTag clears the value of the "client_tag" field.
func (otpuo *OAuthThirdPartyUpdateOne) ClearClientTag() *OAuthThirdPartyUpdateOne {
	otpuo.mutation.ClearClientTag()
	return otpuo
}

// SetClientLogoURL sets the "client_logo_url" field.
func (otpuo *OAuthThirdPartyUpdateOne) SetClientLogoURL(s string) *OAuthThirdPartyUpdateOne {
	otpuo.mutation.SetClientLogoURL(s)
	return otpuo
}

// SetNillableClientLogoURL sets the "client_logo_url" field if the given value is not nil.
func (otpuo *OAuthThirdPartyUpdateOne) SetNillableClientLogoURL(s *string) *OAuthThirdPartyUpdateOne {
	if s != nil {
		otpuo.SetClientLogoURL(*s)
	}
	return otpuo
}

// ClearClientLogoURL clears the value of the "client_logo_url" field.
func (otpuo *OAuthThirdPartyUpdateOne) ClearClientLogoURL() *OAuthThirdPartyUpdateOne {
	otpuo.mutation.ClearClientLogoURL()
	return otpuo
}

// SetClientOauthURL sets the "client_oauth_url" field.
func (otpuo *OAuthThirdPartyUpdateOne) SetClientOauthURL(s string) *OAuthThirdPartyUpdateOne {
	otpuo.mutation.SetClientOauthURL(s)
	return otpuo
}

// SetNillableClientOauthURL sets the "client_oauth_url" field if the given value is not nil.
func (otpuo *OAuthThirdPartyUpdateOne) SetNillableClientOauthURL(s *string) *OAuthThirdPartyUpdateOne {
	if s != nil {
		otpuo.SetClientOauthURL(*s)
	}
	return otpuo
}

// ClearClientOauthURL clears the value of the "client_oauth_url" field.
func (otpuo *OAuthThirdPartyUpdateOne) ClearClientOauthURL() *OAuthThirdPartyUpdateOne {
	otpuo.mutation.ClearClientOauthURL()
	return otpuo
}

// SetResponseType sets the "response_type" field.
func (otpuo *OAuthThirdPartyUpdateOne) SetResponseType(s string) *OAuthThirdPartyUpdateOne {
	otpuo.mutation.SetResponseType(s)
	return otpuo
}

// SetNillableResponseType sets the "response_type" field if the given value is not nil.
func (otpuo *OAuthThirdPartyUpdateOne) SetNillableResponseType(s *string) *OAuthThirdPartyUpdateOne {
	if s != nil {
		otpuo.SetResponseType(*s)
	}
	return otpuo
}

// ClearResponseType clears the value of the "response_type" field.
func (otpuo *OAuthThirdPartyUpdateOne) ClearResponseType() *OAuthThirdPartyUpdateOne {
	otpuo.mutation.ClearResponseType()
	return otpuo
}

// SetScope sets the "scope" field.
func (otpuo *OAuthThirdPartyUpdateOne) SetScope(s string) *OAuthThirdPartyUpdateOne {
	otpuo.mutation.SetScope(s)
	return otpuo
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (otpuo *OAuthThirdPartyUpdateOne) SetNillableScope(s *string) *OAuthThirdPartyUpdateOne {
	if s != nil {
		otpuo.SetScope(*s)
	}
	return otpuo
}

// ClearScope clears the value of the "scope" field.
func (otpuo *OAuthThirdPartyUpdateOne) ClearScope() *OAuthThirdPartyUpdateOne {
	otpuo.mutation.ClearScope()
	return otpuo
}

// Mutation returns the OAuthThirdPartyMutation object of the builder.
func (otpuo *OAuthThirdPartyUpdateOne) Mutation() *OAuthThirdPartyMutation {
	return otpuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (otpuo *OAuthThirdPartyUpdateOne) Select(field string, fields ...string) *OAuthThirdPartyUpdateOne {
	otpuo.fields = append([]string{field}, fields...)
	return otpuo
}

// Save executes the query and returns the updated OAuthThirdParty entity.
func (otpuo *OAuthThirdPartyUpdateOne) Save(ctx context.Context) (*OAuthThirdParty, error) {
	var (
		err  error
		node *OAuthThirdParty
	)
	if err := otpuo.defaults(); err != nil {
		return nil, err
	}
	if len(otpuo.hooks) == 0 {
		node, err = otpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OAuthThirdPartyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			otpuo.mutation = mutation
			node, err = otpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(otpuo.hooks) - 1; i >= 0; i-- {
			if otpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = otpuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, otpuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OAuthThirdParty)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OAuthThirdPartyMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (otpuo *OAuthThirdPartyUpdateOne) SaveX(ctx context.Context) *OAuthThirdParty {
	node, err := otpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (otpuo *OAuthThirdPartyUpdateOne) Exec(ctx context.Context) error {
	_, err := otpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otpuo *OAuthThirdPartyUpdateOne) ExecX(ctx context.Context) {
	if err := otpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (otpuo *OAuthThirdPartyUpdateOne) defaults() error {
	if _, ok := otpuo.mutation.UpdatedAt(); !ok {
		if oauththirdparty.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized oauththirdparty.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := oauththirdparty.UpdateDefaultUpdatedAt()
		otpuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (otpuo *OAuthThirdPartyUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OAuthThirdPartyUpdateOne {
	otpuo.modifiers = append(otpuo.modifiers, modifiers...)
	return otpuo
}

func (otpuo *OAuthThirdPartyUpdateOne) sqlSave(ctx context.Context) (_node *OAuthThirdParty, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   oauththirdparty.Table,
			Columns: oauththirdparty.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: oauththirdparty.FieldID,
			},
		},
	}
	id, ok := otpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OAuthThirdParty.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := otpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauththirdparty.FieldID)
		for _, f := range fields {
			if !oauththirdparty.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauththirdparty.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := otpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := otpuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: oauththirdparty.FieldCreatedAt,
		})
	}
	if value, ok := otpuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: oauththirdparty.FieldCreatedAt,
		})
	}
	if value, ok := otpuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: oauththirdparty.FieldUpdatedAt,
		})
	}
	if value, ok := otpuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: oauththirdparty.FieldUpdatedAt,
		})
	}
	if value, ok := otpuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: oauththirdparty.FieldDeletedAt,
		})
	}
	if value, ok := otpuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: oauththirdparty.FieldDeletedAt,
		})
	}
	if value, ok := otpuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: oauththirdparty.FieldEntID,
		})
	}
	if value, ok := otpuo.mutation.ClientName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauththirdparty.FieldClientName,
		})
	}
	if otpuo.mutation.ClientNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: oauththirdparty.FieldClientName,
		})
	}
	if value, ok := otpuo.mutation.ClientTag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauththirdparty.FieldClientTag,
		})
	}
	if otpuo.mutation.ClientTagCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: oauththirdparty.FieldClientTag,
		})
	}
	if value, ok := otpuo.mutation.ClientLogoURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauththirdparty.FieldClientLogoURL,
		})
	}
	if otpuo.mutation.ClientLogoURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: oauththirdparty.FieldClientLogoURL,
		})
	}
	if value, ok := otpuo.mutation.ClientOauthURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauththirdparty.FieldClientOauthURL,
		})
	}
	if otpuo.mutation.ClientOauthURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: oauththirdparty.FieldClientOauthURL,
		})
	}
	if value, ok := otpuo.mutation.ResponseType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauththirdparty.FieldResponseType,
		})
	}
	if otpuo.mutation.ResponseTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: oauththirdparty.FieldResponseType,
		})
	}
	if value, ok := otpuo.mutation.Scope(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauththirdparty.FieldScope,
		})
	}
	if otpuo.mutation.ScopeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: oauththirdparty.FieldScope,
		})
	}
	_spec.Modifiers = otpuo.modifiers
	_node = &OAuthThirdParty{config: otpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, otpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauththirdparty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
