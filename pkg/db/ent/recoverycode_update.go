// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/appuser-middleware/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/appuser-middleware/pkg/db/ent/recoverycode"
	"github.com/google/uuid"
)

// RecoveryCodeUpdate is the builder for updating RecoveryCode entities.
type RecoveryCodeUpdate struct {
	config
	hooks     []Hook
	mutation  *RecoveryCodeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RecoveryCodeUpdate builder.
func (rcu *RecoveryCodeUpdate) Where(ps ...predicate.RecoveryCode) *RecoveryCodeUpdate {
	rcu.mutation.Where(ps...)
	return rcu
}

// SetCreatedAt sets the "created_at" field.
func (rcu *RecoveryCodeUpdate) SetCreatedAt(u uint32) *RecoveryCodeUpdate {
	rcu.mutation.ResetCreatedAt()
	rcu.mutation.SetCreatedAt(u)
	return rcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rcu *RecoveryCodeUpdate) SetNillableCreatedAt(u *uint32) *RecoveryCodeUpdate {
	if u != nil {
		rcu.SetCreatedAt(*u)
	}
	return rcu
}

// AddCreatedAt adds u to the "created_at" field.
func (rcu *RecoveryCodeUpdate) AddCreatedAt(u int32) *RecoveryCodeUpdate {
	rcu.mutation.AddCreatedAt(u)
	return rcu
}

// SetUpdatedAt sets the "updated_at" field.
func (rcu *RecoveryCodeUpdate) SetUpdatedAt(u uint32) *RecoveryCodeUpdate {
	rcu.mutation.ResetUpdatedAt()
	rcu.mutation.SetUpdatedAt(u)
	return rcu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (rcu *RecoveryCodeUpdate) AddUpdatedAt(u int32) *RecoveryCodeUpdate {
	rcu.mutation.AddUpdatedAt(u)
	return rcu
}

// SetDeletedAt sets the "deleted_at" field.
func (rcu *RecoveryCodeUpdate) SetDeletedAt(u uint32) *RecoveryCodeUpdate {
	rcu.mutation.ResetDeletedAt()
	rcu.mutation.SetDeletedAt(u)
	return rcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rcu *RecoveryCodeUpdate) SetNillableDeletedAt(u *uint32) *RecoveryCodeUpdate {
	if u != nil {
		rcu.SetDeletedAt(*u)
	}
	return rcu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (rcu *RecoveryCodeUpdate) AddDeletedAt(u int32) *RecoveryCodeUpdate {
	rcu.mutation.AddDeletedAt(u)
	return rcu
}

// SetEntID sets the "ent_id" field.
func (rcu *RecoveryCodeUpdate) SetEntID(u uuid.UUID) *RecoveryCodeUpdate {
	rcu.mutation.SetEntID(u)
	return rcu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (rcu *RecoveryCodeUpdate) SetNillableEntID(u *uuid.UUID) *RecoveryCodeUpdate {
	if u != nil {
		rcu.SetEntID(*u)
	}
	return rcu
}

// SetAppID sets the "app_id" field.
func (rcu *RecoveryCodeUpdate) SetAppID(u uuid.UUID) *RecoveryCodeUpdate {
	rcu.mutation.SetAppID(u)
	return rcu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (rcu *RecoveryCodeUpdate) SetNillableAppID(u *uuid.UUID) *RecoveryCodeUpdate {
	if u != nil {
		rcu.SetAppID(*u)
	}
	return rcu
}

// ClearAppID clears the value of the "app_id" field.
func (rcu *RecoveryCodeUpdate) ClearAppID() *RecoveryCodeUpdate {
	rcu.mutation.ClearAppID()
	return rcu
}

// SetUserID sets the "user_id" field.
func (rcu *RecoveryCodeUpdate) SetUserID(u uuid.UUID) *RecoveryCodeUpdate {
	rcu.mutation.SetUserID(u)
	return rcu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (rcu *RecoveryCodeUpdate) SetNillableUserID(u *uuid.UUID) *RecoveryCodeUpdate {
	if u != nil {
		rcu.SetUserID(*u)
	}
	return rcu
}

// ClearUserID clears the value of the "user_id" field.
func (rcu *RecoveryCodeUpdate) ClearUserID() *RecoveryCodeUpdate {
	rcu.mutation.ClearUserID()
	return rcu
}

// SetCode sets the "code" field.
func (rcu *RecoveryCodeUpdate) SetCode(s string) *RecoveryCodeUpdate {
	rcu.mutation.SetCode(s)
	return rcu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (rcu *RecoveryCodeUpdate) SetNillableCode(s *string) *RecoveryCodeUpdate {
	if s != nil {
		rcu.SetCode(*s)
	}
	return rcu
}

// ClearCode clears the value of the "code" field.
func (rcu *RecoveryCodeUpdate) ClearCode() *RecoveryCodeUpdate {
	rcu.mutation.ClearCode()
	return rcu
}

// SetUsed sets the "used" field.
func (rcu *RecoveryCodeUpdate) SetUsed(b bool) *RecoveryCodeUpdate {
	rcu.mutation.SetUsed(b)
	return rcu
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (rcu *RecoveryCodeUpdate) SetNillableUsed(b *bool) *RecoveryCodeUpdate {
	if b != nil {
		rcu.SetUsed(*b)
	}
	return rcu
}

// ClearUsed clears the value of the "used" field.
func (rcu *RecoveryCodeUpdate) ClearUsed() *RecoveryCodeUpdate {
	rcu.mutation.ClearUsed()
	return rcu
}

// Mutation returns the RecoveryCodeMutation object of the builder.
func (rcu *RecoveryCodeUpdate) Mutation() *RecoveryCodeMutation {
	return rcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rcu *RecoveryCodeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := rcu.defaults(); err != nil {
		return 0, err
	}
	if len(rcu.hooks) == 0 {
		affected, err = rcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecoveryCodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rcu.mutation = mutation
			affected, err = rcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rcu.hooks) - 1; i >= 0; i-- {
			if rcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rcu *RecoveryCodeUpdate) SaveX(ctx context.Context) int {
	affected, err := rcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rcu *RecoveryCodeUpdate) Exec(ctx context.Context) error {
	_, err := rcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcu *RecoveryCodeUpdate) ExecX(ctx context.Context) {
	if err := rcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rcu *RecoveryCodeUpdate) defaults() error {
	if _, ok := rcu.mutation.UpdatedAt(); !ok {
		if recoverycode.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized recoverycode.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := recoverycode.UpdateDefaultUpdatedAt()
		rcu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rcu *RecoveryCodeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RecoveryCodeUpdate {
	rcu.modifiers = append(rcu.modifiers, modifiers...)
	return rcu
}

func (rcu *RecoveryCodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   recoverycode.Table,
			Columns: recoverycode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: recoverycode.FieldID,
			},
		},
	}
	if ps := rcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: recoverycode.FieldCreatedAt,
		})
	}
	if value, ok := rcu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: recoverycode.FieldCreatedAt,
		})
	}
	if value, ok := rcu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: recoverycode.FieldUpdatedAt,
		})
	}
	if value, ok := rcu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: recoverycode.FieldUpdatedAt,
		})
	}
	if value, ok := rcu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: recoverycode.FieldDeletedAt,
		})
	}
	if value, ok := rcu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: recoverycode.FieldDeletedAt,
		})
	}
	if value, ok := rcu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: recoverycode.FieldEntID,
		})
	}
	if value, ok := rcu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: recoverycode.FieldAppID,
		})
	}
	if rcu.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: recoverycode.FieldAppID,
		})
	}
	if value, ok := rcu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: recoverycode.FieldUserID,
		})
	}
	if rcu.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: recoverycode.FieldUserID,
		})
	}
	if value, ok := rcu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recoverycode.FieldCode,
		})
	}
	if rcu.mutation.CodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: recoverycode.FieldCode,
		})
	}
	if value, ok := rcu.mutation.Used(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: recoverycode.FieldUsed,
		})
	}
	if rcu.mutation.UsedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: recoverycode.FieldUsed,
		})
	}
	_spec.Modifiers = rcu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, rcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recoverycode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// RecoveryCodeUpdateOne is the builder for updating a single RecoveryCode entity.
type RecoveryCodeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RecoveryCodeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (rcuo *RecoveryCodeUpdateOne) SetCreatedAt(u uint32) *RecoveryCodeUpdateOne {
	rcuo.mutation.ResetCreatedAt()
	rcuo.mutation.SetCreatedAt(u)
	return rcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rcuo *RecoveryCodeUpdateOne) SetNillableCreatedAt(u *uint32) *RecoveryCodeUpdateOne {
	if u != nil {
		rcuo.SetCreatedAt(*u)
	}
	return rcuo
}

// AddCreatedAt adds u to the "created_at" field.
func (rcuo *RecoveryCodeUpdateOne) AddCreatedAt(u int32) *RecoveryCodeUpdateOne {
	rcuo.mutation.AddCreatedAt(u)
	return rcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (rcuo *RecoveryCodeUpdateOne) SetUpdatedAt(u uint32) *RecoveryCodeUpdateOne {
	rcuo.mutation.ResetUpdatedAt()
	rcuo.mutation.SetUpdatedAt(u)
	return rcuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (rcuo *RecoveryCodeUpdateOne) AddUpdatedAt(u int32) *RecoveryCodeUpdateOne {
	rcuo.mutation.AddUpdatedAt(u)
	return rcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (rcuo *RecoveryCodeUpdateOne) SetDeletedAt(u uint32) *RecoveryCodeUpdateOne {
	rcuo.mutation.ResetDeletedAt()
	rcuo.mutation.SetDeletedAt(u)
	return rcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rcuo *RecoveryCodeUpdateOne) SetNillableDeletedAt(u *uint32) *RecoveryCodeUpdateOne {
	if u != nil {
		rcuo.SetDeletedAt(*u)
	}
	return rcuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (rcuo *RecoveryCodeUpdateOne) AddDeletedAt(u int32) *RecoveryCodeUpdateOne {
	rcuo.mutation.AddDeletedAt(u)
	return rcuo
}

// SetEntID sets the "ent_id" field.
func (rcuo *RecoveryCodeUpdateOne) SetEntID(u uuid.UUID) *RecoveryCodeUpdateOne {
	rcuo.mutation.SetEntID(u)
	return rcuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (rcuo *RecoveryCodeUpdateOne) SetNillableEntID(u *uuid.UUID) *RecoveryCodeUpdateOne {
	if u != nil {
		rcuo.SetEntID(*u)
	}
	return rcuo
}

// SetAppID sets the "app_id" field.
func (rcuo *RecoveryCodeUpdateOne) SetAppID(u uuid.UUID) *RecoveryCodeUpdateOne {
	rcuo.mutation.SetAppID(u)
	return rcuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (rcuo *RecoveryCodeUpdateOne) SetNillableAppID(u *uuid.UUID) *RecoveryCodeUpdateOne {
	if u != nil {
		rcuo.SetAppID(*u)
	}
	return rcuo
}

// ClearAppID clears the value of the "app_id" field.
func (rcuo *RecoveryCodeUpdateOne) ClearAppID() *RecoveryCodeUpdateOne {
	rcuo.mutation.ClearAppID()
	return rcuo
}

// SetUserID sets the "user_id" field.
func (rcuo *RecoveryCodeUpdateOne) SetUserID(u uuid.UUID) *RecoveryCodeUpdateOne {
	rcuo.mutation.SetUserID(u)
	return rcuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (rcuo *RecoveryCodeUpdateOne) SetNillableUserID(u *uuid.UUID) *RecoveryCodeUpdateOne {
	if u != nil {
		rcuo.SetUserID(*u)
	}
	return rcuo
}

// ClearUserID clears the value of the "user_id" field.
func (rcuo *RecoveryCodeUpdateOne) ClearUserID() *RecoveryCodeUpdateOne {
	rcuo.mutation.ClearUserID()
	return rcuo
}

// SetCode sets the "code" field.
func (rcuo *RecoveryCodeUpdateOne) SetCode(s string) *RecoveryCodeUpdateOne {
	rcuo.mutation.SetCode(s)
	return rcuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (rcuo *RecoveryCodeUpdateOne) SetNillableCode(s *string) *RecoveryCodeUpdateOne {
	if s != nil {
		rcuo.SetCode(*s)
	}
	return rcuo
}

// ClearCode clears the value of the "code" field.
func (rcuo *RecoveryCodeUpdateOne) ClearCode() *RecoveryCodeUpdateOne {
	rcuo.mutation.ClearCode()
	return rcuo
}

// SetUsed sets the "used" field.
func (rcuo *RecoveryCodeUpdateOne) SetUsed(b bool) *RecoveryCodeUpdateOne {
	rcuo.mutation.SetUsed(b)
	return rcuo
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (rcuo *RecoveryCodeUpdateOne) SetNillableUsed(b *bool) *RecoveryCodeUpdateOne {
	if b != nil {
		rcuo.SetUsed(*b)
	}
	return rcuo
}

// ClearUsed clears the value of the "used" field.
func (rcuo *RecoveryCodeUpdateOne) ClearUsed() *RecoveryCodeUpdateOne {
	rcuo.mutation.ClearUsed()
	return rcuo
}

// Mutation returns the RecoveryCodeMutation object of the builder.
func (rcuo *RecoveryCodeUpdateOne) Mutation() *RecoveryCodeMutation {
	return rcuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rcuo *RecoveryCodeUpdateOne) Select(field string, fields ...string) *RecoveryCodeUpdateOne {
	rcuo.fields = append([]string{field}, fields...)
	return rcuo
}

// Save executes the query and returns the updated RecoveryCode entity.
func (rcuo *RecoveryCodeUpdateOne) Save(ctx context.Context) (*RecoveryCode, error) {
	var (
		err  error
		node *RecoveryCode
	)
	if err := rcuo.defaults(); err != nil {
		return nil, err
	}
	if len(rcuo.hooks) == 0 {
		node, err = rcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecoveryCodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rcuo.mutation = mutation
			node, err = rcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rcuo.hooks) - 1; i >= 0; i-- {
			if rcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rcuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rcuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*RecoveryCode)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RecoveryCodeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rcuo *RecoveryCodeUpdateOne) SaveX(ctx context.Context) *RecoveryCode {
	node, err := rcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rcuo *RecoveryCodeUpdateOne) Exec(ctx context.Context) error {
	_, err := rcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcuo *RecoveryCodeUpdateOne) ExecX(ctx context.Context) {
	if err := rcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rcuo *RecoveryCodeUpdateOne) defaults() error {
	if _, ok := rcuo.mutation.UpdatedAt(); !ok {
		if recoverycode.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized recoverycode.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := recoverycode.UpdateDefaultUpdatedAt()
		rcuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rcuo *RecoveryCodeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RecoveryCodeUpdateOne {
	rcuo.modifiers = append(rcuo.modifiers, modifiers...)
	return rcuo
}

func (rcuo *RecoveryCodeUpdateOne) sqlSave(ctx context.Context) (_node *RecoveryCode, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   recoverycode.Table,
			Columns: recoverycode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: recoverycode.FieldID,
			},
		},
	}
	id, ok := rcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RecoveryCode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recoverycode.FieldID)
		for _, f := range fields {
			if !recoverycode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != recoverycode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: recoverycode.FieldCreatedAt,
		})
	}
	if value, ok := rcuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: recoverycode.FieldCreatedAt,
		})
	}
	if value, ok := rcuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: recoverycode.FieldUpdatedAt,
		})
	}
	if value, ok := rcuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: recoverycode.FieldUpdatedAt,
		})
	}
	if value, ok := rcuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: recoverycode.FieldDeletedAt,
		})
	}
	if value, ok := rcuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: recoverycode.FieldDeletedAt,
		})
	}
	if value, ok := rcuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: recoverycode.FieldEntID,
		})
	}
	if value, ok := rcuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: recoverycode.FieldAppID,
		})
	}
	if rcuo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: recoverycode.FieldAppID,
		})
	}
	if value, ok := rcuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: recoverycode.FieldUserID,
		})
	}
	if rcuo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: recoverycode.FieldUserID,
		})
	}
	if value, ok := rcuo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recoverycode.FieldCode,
		})
	}
	if rcuo.mutation.CodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: recoverycode.FieldCode,
		})
	}
	if value, ok := rcuo.mutation.Used(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: recoverycode.FieldUsed,
		})
	}
	if rcuo.mutation.UsedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: recoverycode.FieldUsed,
		})
	}
	_spec.Modifiers = rcuo.modifiers
	_node = &RecoveryCode{config: rcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recoverycode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
